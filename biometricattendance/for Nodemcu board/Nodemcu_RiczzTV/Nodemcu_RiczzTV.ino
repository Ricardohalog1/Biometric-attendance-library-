//*******************************libraries********************************
//NodeMCU--------------------------
#include <WiFiClient.h> 
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#include <ESP8266HTTPClient.h>
#include <SimpleTimer.h>           //https://github.com/jfturcot/SimpleTimer
//OLED-----------------------------
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>          //https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h>      //https://github.com/adafruit/Adafruit_SSD1306
#include <Adafruit_Fingerprint.h>  //https://github.com/adafruit/Adafruit-Fingerprint-Sensor-Library
//************************************************************************
//Fingerprint scanner Pins
#define Finger_Rx 14 //D5
#define Finger_Tx 12 //D6
// Declaration for SSD1306 display connected using software I2C pins are(22 SCL, 21 SDA)
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     0 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//************************************************************************
SimpleTimer timer;
SoftwareSerial mySerial(Finger_Rx, Finger_Tx);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
//************************************************************************
/* Set these to your desired credentials. */
const char *ssid = "Personal";
const char *password = "Personal11#23";
const char* device_token  = "7ee674a6";
//************************************************************************
String getData, Link;
String URL = "http://192.168.128.1/biometricattendance/getdata.php"; //computer IP or the server domain
//************************************************************************
int FingerID = 0, t1, t2;                                  // The Fingerprint ID from the scanner 
bool device_Mode = false;                           // Default Mode Enrollment
bool firstConnect = false;
uint8_t id;
unsigned long previousMillis = 0;
//*************************Router Icon*********************************
#define image_data_letran_width 54
#define image_data_letran_height 49
const uint8_t PROGMEM image_data_letran[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x1c, 0x00, 0x00, 0x00, 0xf0, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x18, 0x00, 0x00, 0x00, 0xf0, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x18, 0x00, 0x00, 0x00, 0xe0, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x1c, 0x00, 0x00, 0x00, 0xf0, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x18, 0x00, 0x00, 0x00, 0xf0, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x60, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0xf0, 0x00, 
0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0xe0, 0x00, 
0x04, 0x3d, 0x24, 0x92, 0x44, 0x70, 0x00, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x7d, 0xf6, 0xee, 0xee, 0xff, 0xff, 0xf8, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x71, 0xc0, 0x0c, 0x30, 0xc3, 0x00, 0x38, 
0x71, 0xc0, 0x1e, 0x79, 0xe3, 0x80, 0x38, 
0x70, 0x80, 0x08, 0x20, 0x42, 0x00, 0x38, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x01, 0xe0, 0x00, 0x00, 0x00, 0x1e, 0x00, 
0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//-------------------Wireless Icon-------------------
#define Wifi_connected_width 63
#define Wifi_connected_height 49
const uint8_t PROGMEM Wifi_connected_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0xc0, 0x0b, 0xc0, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x7f, 0xfc, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0xff, 0xfe, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x83, 0xfa, 0x7f, 0x83, 0x80, 0x00, 
0x00, 0x03, 0x87, 0xc0, 0x07, 0xc3, 0x80, 0x00, 
0x00, 0x03, 0xc7, 0x80, 0x03, 0xc3, 0x80, 0x00, 
0x00, 0x03, 0x86, 0x02, 0x81, 0x83, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x1f, 0xe0, 0x07, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x3f, 0xf8, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x7f, 0xfc, 0x03, 0x80, 0x00, 
0x00, 0x03, 0xc0, 0x38, 0x38, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x10, 0x08, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x01, 0x80, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x00, 
0x00, 0x03, 0xc0, 0x03, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x07, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 
0x01, 0x57, 0xdb, 0x6a, 0xb5, 0x5f, 0xff, 0x00, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x0f, 0xb5, 0x55, 0x56, 0xd6, 0xd5, 0x52, 0xe0, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
0x0e, 0x1c, 0x00, 0xe3, 0x86, 0x1c, 0x00, 0xe0, 
0x07, 0x1c, 0x01, 0xe3, 0x8f, 0x1c, 0x01, 0xc0, 
0x0e, 0x18, 0x00, 0xc1, 0x86, 0x18, 0x00, 0xe0, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//------------------Fingerprint Icon-------------------
#define FinPr_start_width 64
#define FinPr_start_height 64
const uint8_t PROGMEM FinPr_start_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x5f, 0xfa, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x7f, 0xfe, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x07, 0xff, 0xe9, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x0f, 0xfd, 0x00, 0x7f, 0xff, 0xe0, 0x00, 
0x00, 0x1f, 0xf4, 0x00, 0xff, 0x3f, 0xf8, 0x00, 
0x00, 0x3f, 0xe0, 0x2f, 0xff, 0x87, 0xfc, 0x00, 
0x00, 0x7f, 0x81, 0xff, 0xff, 0x03, 0xfe, 0x00, 
0x00, 0xff, 0x07, 0xf8, 0x2b, 0xe0, 0xff, 0x00, 
0x00, 0xfd, 0x1f, 0x70, 0x02, 0xf0, 0x7f, 0x00, 
0x01, 0xfc, 0x3e, 0xb2, 0x40, 0x7c, 0x3f, 0x80, 
0x03, 0xf8, 0x78, 0x1f, 0xf0, 0x1f, 0x1f, 0xc0, 
0x07, 0xf0, 0xf4, 0x7f, 0xff, 0x07, 0x0f, 0xe0, 
0x07, 0xf1, 0xe0, 0xfa, 0x2f, 0x87, 0x87, 0xe0, 
0x07, 0xe3, 0xe3, 0xc0, 0x07, 0xe1, 0xc7, 0xe0, 
0x0f, 0xc7, 0x87, 0x80, 0x03, 0xf1, 0xe3, 0xf0, 
0x1f, 0xc7, 0x8e, 0x0f, 0xf3, 0xf8, 0x71, 0xf8, 
0x1f, 0x8f, 0x1c, 0x3f, 0xff, 0x9c, 0x71, 0xf8, 
0x1f, 0x8e, 0x18, 0x7f, 0xff, 0x1c, 0x38, 0xf8, 
0x3f, 0x9e, 0x38, 0xf0, 0x1f, 0x8e, 0x38, 0xf8, 
0x3f, 0x0c, 0x71, 0xd0, 0x03, 0xc7, 0x18, 0x7c, 
0x3f, 0x9c, 0x63, 0xc1, 0x01, 0xc3, 0x3c, 0xfe, 
0x7f, 0x1c, 0xc3, 0x07, 0xf0, 0xe3, 0xfc, 0x7c, 
0x7e, 0x38, 0xc7, 0x1e, 0xf8, 0x73, 0xfe, 0x7e, 
0x7f, 0x1c, 0xce, 0x30, 0x1c, 0x71, 0xcc, 0x7e, 
0x7e, 0x38, 0x8c, 0x60, 0x0e, 0x71, 0x8e, 0x3e, 
0x7f, 0x38, 0xcc, 0x45, 0x8e, 0x38, 0xce, 0x7e, 
0x7e, 0x19, 0x88, 0xc7, 0xc7, 0x39, 0x86, 0x3e, 
0x7f, 0x38, 0x9c, 0xcd, 0xe7, 0xf8, 0xcc, 0x7e, 
0x7e, 0x38, 0xc8, 0x8c, 0x47, 0xf8, 0xc6, 0x3e, 
0x7f, 0xb1, 0x88, 0xc8, 0xe3, 0x79, 0xce, 0x7e, 
0x7f, 0xf9, 0x99, 0x8c, 0xc6, 0x38, 0x8c, 0x7e, 
0x7f, 0xf1, 0x08, 0xcc, 0x66, 0x38, 0xce, 0x3e, 
0x3f, 0xf1, 0x99, 0x88, 0xff, 0x39, 0x8c, 0x7c, 
0x5f, 0xf3, 0x19, 0x8c, 0xfe, 0x38, 0xce, 0x7c, 
0x3f, 0xe1, 0x30, 0x98, 0xde, 0x39, 0x8c, 0x7c, 
0x1f, 0xc7, 0x1b, 0x9c, 0xc7, 0x30, 0x8c, 0x78, 
0x3f, 0xc6, 0x3f, 0x10, 0xc6, 0x39, 0x9c, 0xfc, 
0x1f, 0xce, 0x7f, 0x99, 0x8e, 0x31, 0x8f, 0xf8, 
0x0f, 0xfc, 0x67, 0x18, 0xce, 0x79, 0x1f, 0xf0, 
0x0f, 0xf8, 0x46, 0x11, 0xc6, 0x31, 0x1f, 0xf0, 
0x0f, 0xf0, 0xc6, 0x33, 0x8c, 0x73, 0x3f, 0xf0, 
0x07, 0xf1, 0x8e, 0x61, 0x8e, 0x71, 0x3f, 0xe0, 
0x03, 0xfb, 0x1c, 0x33, 0x9c, 0x63, 0xbf, 0xc0, 
0x03, 0xfe, 0x1c, 0xf7, 0x9c, 0xe3, 0xff, 0xc0, 
0x01, 0xfe, 0x78, 0x7f, 0x18, 0x67, 0xff, 0x80, 
0x01, 0xff, 0xf1, 0xcf, 0x18, 0xc7, 0xff, 0x00, 
0x00, 0x7f, 0xe1, 0x8e, 0x39, 0xc7, 0xff, 0x00, 
0x00, 0x7f, 0xf7, 0x0c, 0x31, 0x8f, 0xfe, 0x00, 
0x00, 0x3f, 0xff, 0x1c, 0x71, 0xef, 0xfc, 0x00, 
0x00, 0x1f, 0xff, 0x38, 0xe3, 0xff, 0xf8, 0x00, 
0x00, 0x0f, 0xff, 0xfc, 0xf3, 0xff, 0xe0, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0x0b, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x02, 0xff, 0xfe, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x2f, 0xfa, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//------------------------fingerICON na may Check ICON---------------------------------------
#define FinPr_valid_width 64
#define FinPr_valid_height 64
const uint8_t PROGMEM FinPr_valid_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x5f, 0xfa, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x7f, 0xfe, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x07, 0xff, 0xe9, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x0f, 0xfd, 0x00, 0x7f, 0xff, 0xe0, 0x00, 
0x00, 0x1f, 0xf4, 0x00, 0xff, 0x3f, 0xf8, 0x00, 
0x00, 0x3f, 0xe0, 0x2f, 0xff, 0x87, 0xfc, 0x00, 
0x00, 0x7f, 0x81, 0xff, 0xff, 0x03, 0xfe, 0x00, 
0x00, 0xff, 0x07, 0xf8, 0x2b, 0xe0, 0xff, 0x00, 
0x00, 0xfd, 0x1f, 0x70, 0x02, 0xf0, 0x1f, 0x00, 
0x01, 0xfc, 0x3e, 0xb2, 0x40, 0x7e, 0x07, 0x80, 
0x03, 0xf8, 0x78, 0x1f, 0xf0, 0x18, 0x03, 0xc0, 
0x07, 0xf0, 0xf4, 0x7f, 0xff, 0x08, 0x03, 0xe0, 
0x07, 0xf1, 0xe0, 0xfa, 0x2f, 0x80, 0x03, 0xe0, 
0x07, 0xe3, 0xe3, 0xc0, 0x07, 0xe0, 0x03, 0xe0, 
0x0f, 0xc7, 0x87, 0x80, 0x03, 0xe0, 0x03, 0xf0, 
0x1f, 0xc7, 0x8e, 0x0f, 0xf3, 0x80, 0x01, 0xf8, 
0x1f, 0x8f, 0x1c, 0x3f, 0xff, 0x80, 0x01, 0xf8, 
0x1f, 0x8e, 0x18, 0x7f, 0xff, 0x00, 0x04, 0xf8, 
0x3f, 0x9e, 0x38, 0xf0, 0x1f, 0x00, 0x08, 0xfc, 
0x3f, 0x0c, 0x71, 0xd0, 0x02, 0x00, 0x18, 0xf8, 
0x3f, 0x9c, 0x63, 0xc1, 0x00, 0x00, 0x1c, 0x7e, 
0x7f, 0x1c, 0xc3, 0x07, 0xf0, 0x00, 0x3c, 0xfc, 
0x7e, 0x38, 0xc7, 0x1e, 0xf8, 0x00, 0x7e, 0x7e, 
0x7f, 0x18, 0x4e, 0x30, 0x10, 0x00, 0xcc, 0x3e, 
0x7e, 0x20, 0x4c, 0x60, 0x00, 0x00, 0x8e, 0x7e, 
0x7f, 0x00, 0x0c, 0x45, 0xa0, 0x01, 0xce, 0x3e, 
0x7e, 0x00, 0x08, 0xc7, 0xc0, 0x01, 0x86, 0x7e, 
0x7f, 0x00, 0x0c, 0xcd, 0x80, 0x04, 0xcc, 0x3e, 
0x7e, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xc6, 0x7e, 
0x7f, 0x80, 0x01, 0x48, 0x00, 0x0c, 0xce, 0x3e, 
0x7f, 0xe0, 0x01, 0x8c, 0x00, 0x18, 0xce, 0x7e, 
0x7f, 0xe0, 0x00, 0x8c, 0x00, 0x39, 0x84, 0x7e, 
0x3f, 0xf0, 0x00, 0x48, 0x00, 0x38, 0xce, 0x7c, 
0x5f, 0xe0, 0x00, 0x08, 0x00, 0x38, 0x8c, 0x7c, 
0x3f, 0xf0, 0x00, 0x10, 0x00, 0x71, 0xcc, 0x7c, 
0x1f, 0xc6, 0x00, 0x00, 0x01, 0x39, 0x8c, 0xf8, 
0x3f, 0xc6, 0x00, 0x00, 0x00, 0x31, 0x1c, 0xf8, 
0x1f, 0xcc, 0x00, 0x00, 0x03, 0x39, 0x8f, 0xf8, 
0x0f, 0xfc, 0x80, 0x00, 0x06, 0x31, 0x1f, 0xf0, 
0x0f, 0xf8, 0xc0, 0x00, 0x06, 0x71, 0x9f, 0xf0, 
0x0f, 0xf0, 0xc0, 0x00, 0x0c, 0x73, 0x1f, 0xe0, 
0x07, 0xf1, 0x80, 0x00, 0x1c, 0x63, 0x3f, 0xe0, 
0x03, 0xfb, 0x18, 0x00, 0x0c, 0xe3, 0x7f, 0xc0, 
0x03, 0xfe, 0x1c, 0x00, 0x3c, 0x67, 0xff, 0xc0, 
0x01, 0xfe, 0x78, 0x00, 0x18, 0xe3, 0xff, 0x80, 
0x01, 0xff, 0xf1, 0x00, 0xb8, 0xc7, 0xff, 0x00, 
0x00, 0x7f, 0xe3, 0x01, 0x31, 0xc7, 0xff, 0x00, 
0x00, 0x7f, 0xf7, 0x1e, 0x31, 0x8f, 0xfe, 0x00, 
0x00, 0x3f, 0xfe, 0x9c, 0x73, 0xef, 0xf8, 0x00, 
0x00, 0x1f, 0xff, 0x38, 0x63, 0xff, 0xf8, 0x00, 
0x00, 0x0f, 0xff, 0xfc, 0xf3, 0xff, 0xe0, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x0b, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x02, 0xff, 0xfe, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x2f, 0xfa, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//---------------------------fingerprintICON na may X ICON------------------------------------
#define FinPr_invalid_width 64
#define FinPr_invalid_height 64
const uint8_t PROGMEM FinPr_invalid_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xfd, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xeb, 0xff, 0xf0, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x74, 0x00, 0xff, 0x9f, 0x00, 0x00, 
0x00, 0x00, 0xe0, 0x2f, 0xff, 0x0f, 0x80, 0x00, 
0x00, 0x03, 0xc1, 0xff, 0xff, 0x81, 0xe0, 0x00, 
0x00, 0x07, 0x07, 0xf8, 0x2f, 0xe0, 0xe0, 0x00, 
0x00, 0x0e, 0x1f, 0x70, 0x01, 0xf0, 0x78, 0x00, 
0x00, 0x1a, 0x3e, 0xb2, 0x40, 0x7c, 0x38, 0x00, 
0x00, 0x18, 0x78, 0x1f, 0xf4, 0x1f, 0x1c, 0x00, 
0x00, 0x38, 0xe0, 0x7f, 0xfe, 0x07, 0x0e, 0x00, 
0x00, 0x71, 0xc1, 0xfa, 0x2f, 0x81, 0xc7, 0x00, 
0x00, 0x63, 0x81, 0xc0, 0x07, 0xc1, 0xc7, 0x00, 
0x00, 0xe3, 0x80, 0x00, 0x03, 0x00, 0x63, 0x80, 
0x01, 0xc7, 0x00, 0x0f, 0xf2, 0x00, 0xf1, 0x80, 
0x01, 0x8f, 0x00, 0x3f, 0xfe, 0x00, 0x71, 0xc0, 
0x01, 0x8e, 0x00, 0x0f, 0xf8, 0x00, 0x30, 0xc0, 
0x03, 0x8e, 0x20, 0x08, 0x10, 0x02, 0x38, 0xe0, 
0x03, 0x1c, 0x70, 0x00, 0x00, 0x07, 0x1c, 0xe0, 
0x03, 0x9c, 0x60, 0x00, 0x80, 0x03, 0x3c, 0x60, 
0x07, 0x1c, 0xe0, 0x01, 0xc0, 0x03, 0xfc, 0x60, 
0x07, 0x18, 0xc6, 0x00, 0x00, 0x33, 0xfc, 0x70, 
0x06, 0x3c, 0xc6, 0x00, 0x00, 0x71, 0xce, 0x70, 
0x07, 0x18, 0x8c, 0x00, 0x00, 0x31, 0x8c, 0x30, 
0x06, 0x38, 0xcc, 0xc0, 0x00, 0x79, 0x8e, 0x70, 
0x07, 0x39, 0x8c, 0xc0, 0x03, 0x38, 0xc6, 0x30, 
0x07, 0x18, 0x98, 0x80, 0x07, 0xf8, 0xce, 0x70, 
0x06, 0x39, 0x88, 0xc0, 0x01, 0xf9, 0xc6, 0x30, 
0x07, 0xb8, 0x99, 0x80, 0x01, 0x78, 0x8c, 0x70, 
0x07, 0xf1, 0x88, 0x00, 0x00, 0x38, 0xce, 0x30, 
0x07, 0xf9, 0x99, 0x00, 0x00, 0x39, 0xc6, 0x70, 
0x07, 0xf1, 0x18, 0x00, 0x80, 0x18, 0x8c, 0x60, 
0x03, 0xf1, 0x98, 0x00, 0xc0, 0x18, 0xce, 0x60, 
0x03, 0xe3, 0x10, 0x00, 0xc0, 0x01, 0x8c, 0x60, 
0x03, 0xc6, 0x20, 0x04, 0xc0, 0x01, 0x9c, 0x60, 
0x03, 0xc6, 0x20, 0x08, 0xc0, 0x01, 0x8c, 0xc0, 
0x01, 0xce, 0x00, 0x19, 0x8c, 0x00, 0x9f, 0xc0, 
0x01, 0xfc, 0x00, 0x18, 0xce, 0x00, 0x8f, 0xc0, 
0x00, 0xf8, 0x00, 0x31, 0x8c, 0x00, 0x1f, 0x80, 
0x00, 0xf0, 0x80, 0x31, 0xce, 0x00, 0x3f, 0x80, 
0x00, 0x71, 0x80, 0x23, 0x8c, 0x41, 0x1f, 0x00, 
0x00, 0x7f, 0x02, 0x63, 0x9c, 0x63, 0xbe, 0x00, 
0x00, 0x3c, 0x3c, 0x7f, 0x0c, 0xe3, 0xfe, 0x00, 
0x00, 0x1e, 0x70, 0xff, 0x18, 0xe7, 0xfc, 0x00, 
0x00, 0x0f, 0xf1, 0xcf, 0x38, 0xc7, 0xf8, 0x00, 
0x00, 0x0f, 0xe3, 0x86, 0x39, 0xc7, 0xf0, 0x00, 
0x00, 0x03, 0xfb, 0x0c, 0x31, 0x8f, 0xe0, 0x00, 
0x00, 0x01, 0xff, 0x1c, 0x71, 0xdf, 0xc0, 0x00, 
0x00, 0x00, 0xfe, 0x38, 0xe3, 0xff, 0x80, 0x00, 
0x00, 0x00, 0x7f, 0xfd, 0xe7, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x17, 0xe8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//---------------------------fingerICON na may Lock ICON------------------------------------
#define FinPr_failed_width 64
#define FinPr_failed_height 64
const uint8_t PROGMEM FinPr_failed_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x5f, 0xfa, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x7f, 0xfe, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x07, 0xff, 0xe9, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x0f, 0xfd, 0x00, 0x0f, 0xff, 0xe0, 0x00, 
0x00, 0x1f, 0xf4, 0x00, 0x01, 0x9f, 0xf8, 0x00, 
0x00, 0x3f, 0xe0, 0x00, 0x00, 0x07, 0xfc, 0x00, 
0x00, 0x7f, 0x80, 0x00, 0x00, 0x03, 0xfe, 0x00, 
0x00, 0xff, 0x04, 0x00, 0x00, 0x10, 0xff, 0x00, 
0x00, 0xfd, 0x10, 0x00, 0x00, 0x08, 0x7f, 0x00, 
0x01, 0xfc, 0x30, 0x00, 0x00, 0x0c, 0x3f, 0x80, 
0x03, 0xf8, 0x60, 0x1f, 0xf0, 0x06, 0x1f, 0xc0, 
0x07, 0xf0, 0xe0, 0x3f, 0xfc, 0x03, 0x8f, 0xe0, 
0x07, 0xf1, 0xc0, 0x74, 0xae, 0x03, 0x87, 0xe0, 
0x07, 0xe3, 0xc0, 0x40, 0x02, 0x01, 0xc3, 0xe0, 
0x0f, 0xc7, 0x80, 0x80, 0x03, 0x01, 0xe3, 0xf0, 
0x1f, 0xc7, 0x80, 0x0f, 0xeb, 0x80, 0x71, 0xf8, 
0x1f, 0x8f, 0x00, 0x3f, 0xff, 0x00, 0x71, 0xf8, 
0x1f, 0x8e, 0x00, 0x7f, 0xff, 0x80, 0x38, 0xf8, 
0x3f, 0x9e, 0x00, 0xf0, 0x1f, 0x00, 0x38, 0xfc, 
0x3f, 0x0c, 0x00, 0xd0, 0x03, 0x81, 0x1c, 0xf8, 
0x3f, 0x9c, 0x01, 0xc1, 0x01, 0x81, 0x5c, 0x7e, 
0x7f, 0x1c, 0x81, 0x07, 0xf0, 0x81, 0xfc, 0x7c, 
0x7e, 0x38, 0x00, 0x08, 0xa8, 0x01, 0x7c, 0x7e, 
0x7f, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7e, 
0x7e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 
0x7f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7e, 
0x7e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 
0x7f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7e, 
0x7e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 
0x7f, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7e, 
0x7f, 0xf0, 0x00, 0x00, 0xc0, 0x00, 0x0c, 0x3e, 
0x7f, 0xf8, 0x00, 0x04, 0xe0, 0x00, 0x0e, 0x7e, 
0x3f, 0xf0, 0x00, 0x0c, 0x70, 0x00, 0x0c, 0x7c, 
0x5f, 0xf0, 0x00, 0x08, 0xf0, 0x00, 0x0e, 0x7e, 
0x3f, 0xe0, 0x00, 0x0c, 0xd0, 0x00, 0x0c, 0x78, 
0x1f, 0xc0, 0x00, 0x08, 0xc0, 0x00, 0x0c, 0x7c, 
0x3f, 0xc4, 0x00, 0x04, 0xc0, 0x00, 0x1c, 0xf8, 
0x1f, 0xc8, 0x00, 0x00, 0xc0, 0x00, 0x0f, 0xf8, 
0x0f, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xf0, 
0x0f, 0xf8, 0x00, 0x01, 0xc0, 0x00, 0x1f, 0xf0, 
0x0f, 0xf0, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xf0, 
0x07, 0xf0, 0x00, 0x03, 0x80, 0x00, 0x1f, 0xe0, 
0x03, 0xf8, 0x00, 0x03, 0x80, 0x00, 0x1f, 0xc0, 
0x03, 0xf8, 0x00, 0x07, 0x00, 0x00, 0x3f, 0xc0, 
0x01, 0xfc, 0x00, 0x03, 0x00, 0x00, 0x1f, 0x80, 
0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 
0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 
0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 
0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0x40, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//-------------------------Scan na may bilog--------------------------------------
#define FinPr_scan_width 64
#define FinPr_scan_height 64
const uint8_t PROGMEM FinPr_scan_bits[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x003f, 0x00fa, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0003, 0x00ff, 0x00ff, 0x0080, 0x0000, 0x0000, 
0x0000, 0x0000, 0x000f, 0x00ff, 0x002f, 0x00f8, 0x0000, 0x0000, 
0x0000, 0x0000, 0x003f, 0x00ff, 0x0000, 0x00fc, 0x0000, 0x0000, 
0x0000, 0x0000, 0x00ff, 0x00ff, 0x0000, 0x001f, 0x0080, 0x0000, 
0x0000, 0x0003, 0x00ff, 0x00ff, 0x0000, 0x0007, 0x0080, 0x0000, 
0x0000, 0x0007, 0x00ff, 0x00fb, 0x0000, 0x0001, 0x00e0, 0x0000, 
0x0000, 0x000f, 0x00ff, 0x00ff, 0x00fc, 0x0000, 0x0078, 0x0000, 
0x0000, 0x001f, 0x00ff, 0x00fe, 0x00ff, 0x00c0, 0x0038, 0x0000, 
0x0000, 0x003f, 0x00ff, 0x0080, 0x0003, 0x00e0, 0x001e, 0x0000, 
0x0000, 0x007f, 0x00fc, 0x0000, 0x0000, 0x007c, 0x000e, 0x0000, 
0x0000, 0x00ff, 0x00f4, 0x0000, 0x0000, 0x001c, 0x0007, 0x0000, 
0x0001, 0x00ff, 0x00e0, 0x0000, 0x0000, 0x0007, 0x0003, 0x0080, 
0x0003, 0x00ff, 0x00c0, 0x0000, 0x0000, 0x0003, 0x0081, 0x00c0, 
0x0003, 0x00ff, 0x0080, 0x0007, 0x00f0, 0x0001, 0x00c0, 0x00e0, 
0x0007, 0x00ff, 0x0000, 0x001e, 0x00bc, 0x0000, 0x00e0, 0x00e0, 
0x0007, 0x00fe, 0x0000, 0x0038, 0x0006, 0x0000, 0x0070, 0x0070, 
0x000f, 0x00fc, 0x0000, 0x0060, 0x00e3, 0x0000, 0x0038, 0x0070, 
0x000f, 0x00f8, 0x0000, 0x00c3, 0x0081, 0x0080, 0x0018, 0x0038, 
0x001f, 0x00f8, 0x0001, 0x008e, 0x0001, 0x0080, 0x001c, 0x0018, 
0x001f, 0x00f0, 0x0003, 0x001c, 0x007c, 0x00c0, 0x000c, 0x0018, 
0x003f, 0x00f0, 0x0006, 0x0018, 0x00fc, 0x0040, 0x0006, 0x001c, 
0x003f, 0x00e0, 0x0004, 0x0071, 0x0082, 0x0060, 0x0006, 0x000c, 
0x003f, 0x00e0, 0x0004, 0x0063, 0x0003, 0x0060, 0x0007, 0x000c, 
0x003f, 0x00c0, 0x0001, 0x00c6, 0x0033, 0x0020, 0x0003, 0x000e, 
0x007f, 0x00c0, 0x0007, 0x008c, 0x0062, 0x0030, 0x0003, 0x0006, 
0x007f, 0x00c0, 0x0006, 0x0018, 0x00c6, 0x0030, 0x0003, 0x0006, 
0x007f, 0x00c0, 0x0000, 0x0071, 0x008c, 0x0000, 0x0003, 0x0086, 
0x007b, 0x0080, 0x0001, 0x00c3, 0x001d, 0x0080, 0x0001, 0x0086, 
0x007f, 0x00c0, 0x0007, 0x000e, 0x0030, 0x00c0, 0x0003, 0x0006, 
0x007f, 0x0080, 0x000c, 0x001c, 0x0060, 0x00c0, 0x0001, 0x0086, 
0x007f, 0x00c0, 0x0000, 0x0070, 0x00cc, 0x0070, 0x0001, 0x00ee, 
0x007f, 0x0080, 0x0001, 0x00e3, 0x0086, 0x0010, 0x0003, 0x00fe, 
0x007f, 0x00c0, 0x0007, 0x008e, 0x0003, 0x0000, 0x0001, 0x00fe, 
0x007b, 0x00c0, 0x0004, 0x0018, 0x0041, 0x00c0, 0x0003, 0x00fe, 
0x007f, 0x00c0, 0x0000, 0x0071, 0x00f8, 0x00c0, 0x0003, 0x00fe, 
0x003f, 0x00c0, 0x0001, 0x00c3, 0x009c, 0x0000, 0x0003, 0x00fe, 
0x003f, 0x00e0, 0x0003, 0x008e, 0x0006, 0x0000, 0x0003, 0x00fc, 
0x003f, 0x00e0, 0x0000, 0x001c, 0x0003, 0x0080, 0x0007, 0x00fc, 
0x003f, 0x00e0, 0x0000, 0x0070, 0x00e1, 0x00c0, 0x0007, 0x00fc, 
0x003f, 0x00e0, 0x0001, 0x00c3, 0x00f8, 0x0000, 0x0007, 0x00fc, 
0x001f, 0x00f0, 0x0000, 0x0087, 0x001c, 0x0000, 0x000f, 0x00f8, 
0x001f, 0x00f8, 0x0000, 0x001c, 0x0007, 0x0000, 0x001f, 0x00f8, 
0x000f, 0x00b8, 0x0000, 0x0038, 0x0001, 0x0000, 0x001f, 0x00f0, 
0x000f, 0x00fc, 0x0000, 0x0021, 0x00e0, 0x0000, 0x003f, 0x00f0, 
0x000f, 0x00fe, 0x0000, 0x0003, 0x0038, 0x0000, 0x007f, 0x00f0, 
0x0007, 0x00ff, 0x0000, 0x0006, 0x001c, 0x0000, 0x00ff, 0x00e0, 
0x0003, 0x00ff, 0x0080, 0x0004, 0x0000, 0x0000, 0x00ff, 0x00c0, 
0x0003, 0x00ff, 0x00c0, 0x0000, 0x0000, 0x0003, 0x00ff, 0x0040, 
0x0001, 0x00ff, 0x00e0, 0x0000, 0x0000, 0x0007, 0x00ff, 0x0080, 
0x0000, 0x00ff, 0x00f8, 0x0000, 0x0000, 0x001f, 0x00ff, 0x0000, 
0x0000, 0x007e, 0x00fc, 0x0000, 0x0000, 0x003f, 0x00fb, 0x0000, 
0x0000, 0x0077, 0x00ff, 0x0080, 0x0001, 0x00ff, 0x00fe, 0x0000, 
0x0000, 0x001f, 0x00ff, 0x00fa, 0x005f, 0x00ff, 0x00fc, 0x0000, 
0x0000, 0x001f, 0x00ff, 0x00ff, 0x00ff, 0x00ff, 0x00f0, 0x0000, 
0x0000, 0x0007, 0x00ff, 0x00ff, 0x00ff, 0x00ff, 0x00e0, 0x0000, 
0x0000, 0x0003, 0x00ff, 0x00ff, 0x00ff, 0x00ff, 0x00c0, 0x0000, 
0x0000, 0x0000, 0x00ff, 0x00ff, 0x00ff, 0x00ff, 0x0000, 0x0000, 
0x0000, 0x0000, 0x007f, 0x00ff, 0x00ff, 0x00fc, 0x0000, 0x0000, 
0x0000, 0x0000, 0x000f, 0x00ff, 0x00ff, 0x00f0, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0003, 0x00ff, 0x00ff, 0x00a0, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x003b, 0x00fa, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
//************************************************************************
void setup() {
  Serial.begin(115200);
  delay(2000);
  //-----------initiate OLED display-------------
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  // you can delet these three lines if you don't want to get the Adfruit logo appear
  display.display();
  delay(2000); // Pause for 2 seconds
  display.clearDisplay();
  //---------------------------------------------
  connectToWiFi();
  //---------------------------------------------
  // Set the data rate for the sensor serial port
  finger.begin(57600);
  Serial.println("\n\nAdafruit finger detect test");

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
    display.clearDisplay();
    display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    display.clearDisplay();
    display.drawBitmap( 32, 0, FinPr_failed_bits, FinPr_failed_width, FinPr_failed_height, WHITE);
    display.display();
    while (1) { delay(1); }
  }
  //---------------------------------------------
  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  Serial.println("Waiting for valid finger...");
  //Timers---------------------------------------
  timer.setInterval(25000L, CheckMode);
  t1 = timer.setInterval(5000L, ChecktoAddID);      //Set an internal timer every 10sec to check if there a new fingerprint in the website to add it.
  t2 = timer.setInterval(1000L, ChecktoDeleteID);   //Set an internal timer every 15sec to check wheater there an ID to delete in the website.
  //---------------------------------------------
  CheckMode();
}
//************************************************************************
void loop() {
  timer.run();      //Keep the timer in the loop function in order to update the time as soon as possible
  //check if there's a connection to Wi-Fi or not
  if(!WiFi.isConnected()){
    if (millis() - previousMillis >= 10000) {
      previousMillis = millis();
      connectToWiFi();    //Retry to connect to Wi-Fi
    }
  }
  CheckFingerprint();   //Check the sensor if the there a finger.
  delay(2000);
}
//************************************************************************
void CheckFingerprint(){
//  unsigned long previousMillisM = millis();
//  Serial.println(previousMillisM);
  // If there no fingerprint has been scanned return -1 or -2 if there an error or 0 if there nothing, The ID start form 1 to 127
  // Get the Fingerprint ID from the Scanner
  FingerID = getFingerprintID();
  DisplayFingerprintID();
//  Serial.println(millis() - previousMillisM);
  
}
//************Display the fingerprint ID state on the OLED*************
void DisplayFingerprintID(){
  //Fingerprint has been detected 
  if (FingerID > 0){
    display.clearDisplay();
    display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
    SendFingerprintID( FingerID ); // Send the Fingerprint ID to the website.
    delay(2000);
  }
  //---------------------------------------------
  //No finger detected
  else if (FingerID == 0){
    display.clearDisplay();
    display.drawBitmap( 32, 0, FinPr_start_bits, FinPr_start_width, FinPr_start_height, WHITE);
    display.display();
  }
  //---------------------------------------------
  //Didn't find a match
  else if (FingerID == -1){
    display.clearDisplay();
    display.drawBitmap( 34, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
    display.display();
  }
  //---------------------------------------------
  //Didn't find the scanner or there an error
  else if (FingerID == -2){
    display.clearDisplay();
    display.drawBitmap( 32, 0, FinPr_failed_bits, FinPr_failed_width, FinPr_failed_height, WHITE);
    display.display();
  }
}
//************send the fingerprint ID to the website*************
void SendFingerprintID( int finger ){
  Serial.println("Sending the Fingerprint ID");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "?FingerID=" + String(finger) + "&device_token=" + device_token; // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request   //Specify content-type header
    
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
    
    Serial.println(httpCode);   //Print HTTP return code
    Serial.println(payload);    //Print request response payload
    Serial.println(finger);     //Print fingerprint ID
  
    if (payload.substring(0, 5) == "login") {
      String user_name = payload.substring(5);
  //  Serial.println(user_name);
      
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(15,0);             // Start at top-left corner
      display.print(F("    Time In"));
      display.setCursor(0,20);
      display.print(user_name);
      display.display();
    }
    else if (payload.substring(0, 6) == "logout") {
      String user_name = payload.substring(6);
  //  Serial.println(user_name);
      
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(10,0);             // Start at top-left corner
      display.print(F("    Time Out"));
      display.setCursor(0,20);
      display.print(user_name);
      display.display();
    }
    delay(10);
    http.end();  //Close connection
  }
}
//********************Get the Fingerprint ID******************
int  getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println("No finger detected");
      return 0;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return -2;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      return -2;
    default:
      //Serial.println("Unknown error");
      return -2;
  }
  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return -2;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return -2;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return -2;
    default:
      //Serial.println("Unknown error");
      return -2;
  }
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return -2;
  } else if (p == FINGERPRINT_NOTFOUND) {
    //Serial.println("Did not find a match");
    return -1;
  } else {
    //Serial.println("Unknown error");
    return -2;
  }   
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 

  return finger.fingerID;
}
//******************Check if there a Fingerprint ID to delete******************
void ChecktoDeleteID(){
  Serial.println("Check to Delete ID");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "?DeleteID=check&device_token=" + String(device_token); // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request,
//    Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
  
    if (payload.substring(0, 6) == "del-id") {
      String del_id = payload.substring(6);
      Serial.println(del_id);
      http.end();  //Close connection
      deleteFingerprint( del_id.toInt() );
      delay(2000);
    }
    http.end();  //Close connection
  }
}
//******************Delete Finpgerprint ID*****************
uint8_t deleteFingerprint( int id) {
  uint8_t p = -1;
  
  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    //Serial.println("Deleted!");
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,0);             // Start at top-left corner
    display.print(F("Deleted!\n"));
    display.display();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,0);             // Start at top-left corner
    display.print(F("Communication error!\n"));
    display.display();
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    //Serial.println("Could not delete in that location");
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,0);             // Start at top-left corner
    display.print(F("Could not delete in that location!\n"));
    display.display();
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,0);             // Start at top-left corner
    display.print(F("Error writing to flash!\n"));
    display.display();
    return p;
  } else {
    //Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0,0);             // Start at top-left corner
    display.print(F("Unknown error:\n"));
    display.display();
    return p;
  }   
}
//******************Check if there a Fingerprint ID to add******************
void ChecktoAddID(){
//  Serial.println("Check to Add ID");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "?Get_Fingerid=get_id&device_token=" + String(device_token); // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request,
//    Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
  
    if (payload.substring(0, 6) == "add-id") {
      String add_id = payload.substring(6);
      Serial.println(add_id);
      id = add_id.toInt();
      http.end();  //Close connection
      getFingerprintEnroll();
    }
    http.end();  //Close connection
  }
}
//******************Check the Mode*****************
void CheckMode(){
  Serial.println("Check Mode");
  if(WiFi.isConnected()){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "?Check_mode=get_mode&device_token=" + String(device_token); // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    http.begin(Link); //initiate HTTP request,
//    Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
  
    if (payload.substring(0, 4) == "mode") {
      String dev_mode = payload.substring(4);
      int devMode = dev_mode.toInt();
      if(!firstConnect){
        device_Mode = devMode;
        firstConnect = true;
      }
//      Serial.println(dev_mode);
      if(device_Mode && devMode){
        device_Mode = false;
        timer.disable(t1);
        timer.disable(t2);
        Serial.println("Deivce Mode: Attandance");
      }
      else if(!device_Mode && !devMode){
        device_Mode = true;
        timer.enable(t1);
        timer.enable(t2);
        Serial.println("Deivce Mode: Enrollment");
      }
      http.end();  //Close connection
    }
    http.end();  //Close connection
  }
//  Serial.print("Number of Timers: ");
//  Serial.println(timer.getNumTimers());
}
//******************Enroll a Finpgerprint ID*****************
uint8_t getFingerprintEnroll() {
  int p = -1;
  display.clearDisplay();
  display.drawBitmap( 34, 0, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, WHITE);
  display.display();
  while (p != FINGERPRINT_OK) {
          
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      display.setTextSize(0.9);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(0,0);             // Start at top-left corner
      display.print(F("scanning"));
      display.display();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!
  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  display.clearDisplay();
  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.print(F("Remove"));
  display.setCursor(0,20);
  display.print(F("finger"));
  display.display();
  //Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  display.clearDisplay();
  display.drawBitmap( 34, 0, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, WHITE);
  display.display();
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      display.setTextSize(0.9);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(0,0);             // Start at top-left corner
      display.print(F("scanning"));
      display.display();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
      display.display();
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
    display.clearDisplay();
    display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
      Serial.println("Fingerprints did not match");
      display.clearDisplay();
      display.drawBitmap( 34, 0, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, WHITE);
      display.display();
    return p;
  } else {
      Serial.println("Unknown error");
    return p;
  }   
  
  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    display.clearDisplay();
    display.drawBitmap( 34, 0, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, WHITE);
    display.display();
    confirmAdding(id);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
}
//******************Check if there a Fingerprint ID to add******************
void confirmAdding(int id){
  Serial.println("confirm Adding");
  if(WiFi.status() == WL_CONNECTED){
    HTTPClient http;    //Declare object of class HTTPClient
    //GET Data
    getData = "?confirm_id=" + String(id) + "&device_token=" + String(device_token); // Add the Fingerprint ID to the Post array in order to send it
    //GET methode
    Link = URL + getData;
    
    http.begin(Link); //initiate HTTP request,
//    Serial.println(Link);
    int httpCode = http.GET();   //Send the request
    String payload = http.getString();    //Get the response payload
    if(httpCode == 200){
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(0,0);             // Start at top-left corner
      display.print(payload);
      display.display();
      Serial.println(payload);
      delay(2000);
    }
    else{
      Serial.println("Error Confirm!!");      
    }
    http.end();  //Close connection
  }
}
//********************connect to the WiFi******************
void connectToWiFi(){
    WiFi.mode(WIFI_OFF);        //Prevents reconnection issue (taking too long to connect)
    delay(2000);
    WiFi.mode(WIFI_STA);
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);

    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(WHITE);        // Draw white text
    display.setCursor(0, 0);             // Start at top-left corner
    display.print(F("Connecting to \n"));
    display.setCursor(0, 50);   
    display.setTextSize(1);          
    display.print(ssid);
    display.drawBitmap( 73, 10, image_data_letran, image_data_letran_width, image_data_letran_height, WHITE);
    display.display();
    
    uint32_t periodToConnect = 30000L;
    for(uint32_t StartToConnect = millis(); (millis()-StartToConnect) < periodToConnect;){
      if ( WiFi.status() != WL_CONNECTED ){
        delay(2000);
        Serial.print(".");
      } else{
        break;
      }
    }
    
    if(WiFi.isConnected()){
      Serial.println("");
      Serial.println("Connected");
      
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      display.setTextColor(WHITE);        // Draw white text
      display.setCursor(8, 0);             // Start at top-left corner
      display.print(F("Connected \n"));
      display.drawBitmap( 33, 15, Wifi_connected_bits, Wifi_connected_width, Wifi_connected_height, WHITE);
      display.display();
      
      Serial.print("IP address: ");
      Serial.println(WiFi.localIP());  //IP address assigned to your ESP
    }
    else{
      Serial.println("");
      Serial.println("Not Connected");
      WiFi.mode(WIFI_OFF);
      delay(2000);
    }
    delay(2000);
}
//=======================================================================
